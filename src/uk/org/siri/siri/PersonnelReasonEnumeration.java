//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.11.14 at 03:28:36 PM PST 
//


package uk.org.siri.siri;

public enum PersonnelReasonEnumeration {

    
    PTI_20_0("pti20_0"),

    /**
     * TPEG Pti20_0   unknown
     * 
     */
    
    UNKNOWN("unknown"),
    
    PTI_20_1("pti20_1"),

    /**
     * TPEG Pti20_1   staff sickness
     * 
     */
    
    STAFF_SICKNESS("staffSickness"),
    
    PTI_20_1_ALIAS_1("pti20_1_Alias_1"),

    /**
     *   staff injury alias to TPEG Pti20_1   staff sickness
     * 
     */
    
    STAFF_INJURY("staffInjury"),
    
    PTI_20_1_ALIAS_2("pti20_1_Alias_2"),

    /**
     * contractor staff injury alias to TPEG Pti20_1   staff sickness
     * 
     */
    
    CONTRACTOR_STAFF_INJURY("contractorStaffInjury"),
    
    PTI_20_2("pti20_2"),

    /**
     * TPEG Pti20_2   staff absence
     * 
     */
    
    STAFF_ABSENCE("staffAbsence"),
    
    PTI_20_3("pti20_3"),

    /**
     * TPEG Pti20_3   staff in wrong place
     * 
     */
    
    STAFF_IN_WRONG_PLACE("staffInWrongPlace"),
    
    PTI_20_4("pti20_4"),

    /**
     * TPEG Pti20_4   staff shortage
     * 
     */
    
    STAFF_SHORTAGE("staffShortage"),
    
    PTI_20_5("pti20_5"),

    /**
     * TPEG Pti20_5   industrial action
     * 
     */
    
    INDUSTRIAL_ACTION("industrialAction"),
    
    PTI_20_5_ALIAS_1("pti20_5_Alias_1"),

    /**
     * Unofffical action - alias to TPEG Pti20_5   industrial action
     * 
     */
    
    UNOFFICIAL_INDUSTRIAL_ACTION("unofficialIndustrialAction"),
    
    PTI_20_6("pti20_6"),

    /**
     * TPEG Pti20_6   work to rule
     * 
     */
    
    WORK_TO_RULE("workToRule"),
    
    PTI_20_255("pti20_255"),

    /**
     * TPEG Pti20_255 undefined personnel problem 
     * 
     */
    
    UNDEFINED_PERSONNEL_PROBLEM("undefinedPersonnelProblem");
    private final String value;

    PersonnelReasonEnumeration(String v) {
        value = v;
    }

    public static PersonnelReasonEnumeration fromString(String v) {
		if (v != null) {
			for (PersonnelReasonEnumeration c : PersonnelReasonEnumeration.values()) {
				if (v.equalsIgnoreCase(c.toString())) {
			          return c;
			    }				
			}
		}
		throw new IllegalArgumentException(v);
	}

	@Override
	public String toString() {
		return value;
	}

}
