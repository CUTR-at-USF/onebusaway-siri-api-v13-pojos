//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.11.14 at 03:28:36 PM PST 
//


package eu.datex2.schema._1_0._1_0;

import uk.org.siri.siri.ServiceConditionEnumeration;

public enum PublicEventTypeEnum {


    /**
     * Athletics event that could disrupt traffic.
     * 
     */
    
    ATHLETICS_MEETING("athleticsMeeting"),

    /**
     * Ball game event that could disrupt traffic.
     * 
     */
    
    BALL_GAME("ballGame"),

    /**
     * Baseball game event that could disrupt traffic.
     * 
     */
    
    BASEBALL_GAME("baseballGame"),

    /**
     * Basketball game event that could disrupt traffic.
     * 
     */
    
    BASKETBALL_GAME("basketballGame"),

    /**
     * Bicycle race that could disrupt traffic.
     * 
     */
    
    BICYCLE_RACE("bicycleRace"),

    /**
     * Regatta (boat race event of sailing, powerboat or rowing) that could disrupt traffic.
     * 
     */
    
    BOAT_RACE("boatRace"),

    /**
     * Boxing event that could disrupt traffic.
     * 
     */
    
    BOXING_TOURNAMENT("boxingTournament"),

    /**
     * Bull fighting event that could disrupt traffic.
     * 
     */
    
    BULL_FIGHT("bullFight"),

    /**
     * Formal or religious act, rite or ceremony that could disrupt traffic.
     * 
     */
    
    CEREMONIAL_EVENT("ceremonialEvent"),

    /**
     * Concert event that could disrupt traffic.
     * 
     */
    
    CONCERT("concert"),

    /**
     * Cricket match that could disrupt traffic.
     * 
     */
    
    CRICKET_MATCH("cricketMatch"),

    /**
     * Major display or trade show which could disrupt traffic.
     * 
     */
    
    EXHIBITION("exhibition"),

    /**
     * Periodic (e.g. annual), often traditional, gathering for entertainment or trade promotion, which could disrupt traffic.
     * 
     */
    
    FAIR("fair"),

    /**
     * Celebratory event or series of events which could disrupt traffic.
     * 
     */
    
    FESTIVAL("festival"),

    /**
     * Film or TV making event which could disrupt traffic.
     * 
     */
    
    FILM_TV_MAKING("filmTVMaking"),

    /**
     * Football match that could disrupt traffic.
     * 
     */
    
    FOOTBALL_MATCH("footballMatch"),

    /**
     * Periodic (e.g. annual), often traditional, gathering for entertainment, which could disrupt traffic.
     * 
     */
    
    FUNFAIR("funfair"),

    /**
     * Golf tournament event that could disrupt traffic.
     * 
     */
    
    GOLF_TOURNAMENT("golfTournament"),

    /**
     * Hockey game event that could disrupt traffic.
     * 
     */
    
    HOCKEY_GAME("hockeyGame"),

    /**
     * Horse race meeting that could disrupt traffic.
     * 
     */
    
    HORSE_RACE_MEETING("horseRaceMeeting"),

    /**
     * Large sporting event of an international nature that could disrupt traffic.
     * 
     */
    
    INTERNATIONAL_SPORTS_MEETING("internationalSportsMeeting"),

    /**
     * Significant organised event either on or near the roadway which could disrupt traffic.
     * 
     */
    
    MAJOR_EVENT("majorEvent"),

    /**
     * Marathon, cross-country or road running event that could disrupt traffic.
     * 
     */
    
    MARATHON("marathon"),

    /**
     * Periodic (e.g. weekly) gathering for buying and selling, which could disrupt traffic.
     * 
     */
    
    MARKET("market"),

    /**
     * Sports match of unspecified type that could disrupt traffic.
     * 
     */
    
    MATCH("match"),

    /**
     * Motor sport race meeting that could disrupt traffic.
     * 
     */
    
    MOTOR_SPORT_RACE_MEETING("motorSportRaceMeeting"),

    /**
     * Formal display or organised procession which could disrupt traffic.
     * 
     */
    
    PARADE("parade"),

    /**
     * Race meeting (other than horse or motor sport) that could disrupt traffic.
     * 
     */
    
    RACE_MEETING("raceMeeting"),

    /**
     * Rugby match that could disrupt traffic.
     * 
     */
    
    RUGBY_MATCH("rugbyMatch"),

    /**
     * A series of significant organised events either on or near the roadway which could disrupt traffic.
     * 
     */
    
    SEVERAL_MAJOR_EVENTS("severalMajorEvents"),

    /**
     * Entertainment event that could disrupt traffic.
     * 
     */
   
    SHOW("show"),

    /**
     * Horse showing jumping and tournament event that could disrupt traffic.
     * 
     */
   
    SHOW_JUMPING("showJumping"),

    /**
     * Sports event of unspecified type that could disrupt traffic.
     * 
     */
   
    SPORTS_MEETING("sportsMeeting"),

    /**
     * Public ceremony or visit of national or international significance which could disrupt traffic.
     * 
     */
   
    STATE_OCCASION("stateOccasion"),

    /**
     * Tennis tournament that could disrupt traffic.
     * 
     */
   
    TENNIS_TOURNAMENT("tennisTournament"),

    /**
     * Sporting event or series of events of unspecified type lasting more than one day which could disrupt traffic.
     * 
     */
   
    TOURNAMENT("tournament"),

    /**
     * A periodic (e.g. annual), often traditional, gathering for trade promotion, which could disrupt traffic.
     * 
     */
    
    TRADE_FAIR("tradeFair"),

    /**
     * Water sports meeting that could disrupt traffic.
     * 
     */
    
    WATER_SPORTS_MEETING("waterSportsMeeting"),

    /**
     * Winter sports meeting or event (e.g. skiing, ski jumping, skating) that could disrupt traffic.
     * 
     */
    
    WINTER_SPORTS_MEETING("winterSportsMeeting"),

    /**
     * Other than as defined in this enumeration.
     * 
     */
    
    OTHER("other");
    private final String value;

    PublicEventTypeEnum(String v) {
        value = v;
    }

    public static PublicEventTypeEnum fromString(String v) {
		if (v != null) {
			for (PublicEventTypeEnum c : PublicEventTypeEnum.values()) {
				if (v.equalsIgnoreCase(c.toString())) {
			          return c;
			    }				
			}
		}
		throw new IllegalArgumentException(v);
	}

	@Override
	public String toString() {
		return value;
	}

}
